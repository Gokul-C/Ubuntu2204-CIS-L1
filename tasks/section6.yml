---
# tasks file for ansible-cis-ubuntu-2204

# ------------------------------------------------------------------------------

- name: "SECTION6 | 6.1.1 | Ensure permissions on /etc/passwd are configured"
  ansible.builtin.file:
    dest: /etc/passwd
    owner: root
    group: root
    mode: "0644"
  when:
    - cis_ubuntu2204_rule_6_1_1
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1

- name: "SECTION6 | 6.1.2 | Ensure permissions on /etc/passwd- are configured"
  ansible.builtin.file:
    dest: /etc/passwd-
    owner: root
    group: root
    mode: "0644"
  when:
    - cis_ubuntu2204_rule_6_1_2
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1

- name: "SECTION6 | 6.1.3 | Ensure permissions on /etc/group are configured"
  ansible.builtin.file:
    dest: /etc/group
    owner: root
    group: root
    mode: "0644"
  when:
    - cis_ubuntu2204_rule_6_1_3
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1

- name: "SECTION6 | 6.1.4 | Ensure permissions on /etc/group- are configured"
  ansible.builtin.file:
    dest: /etc/group-
    owner: root
    group: root
    mode: "0644"
  when:
    - cis_ubuntu2204_rule_6_1_4
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1

- name: "SECTION6 | 6.1.5 | Ensure permissions on /etc/shadow are configured"
  ansible.builtin.file:
    dest: /etc/shadow
    owner: root
    group: shadow
    mode: "0640"
  when:
    - cis_ubuntu2204_rule_6_1_5
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1

- name: "SECTION6 | 6.1.6 | Ensure permissions on /etc/shadow- are configured"
  ansible.builtin.file:
    dest: /etc/shadow-
    owner: root
    group: shadow
    mode: "0640"
  when:
    - cis_ubuntu2204_rule_6_1_6
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1

- name: "SECTION6 | 6.1.7 | Ensure permissions on /etc/gshadow are configured"
  ansible.builtin.file:
    dest: /etc/gshadow
    owner: root
    group: shadow
    mode: "0640"
  when:
    - cis_ubuntu2204_rule_6_1_7
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1

- name: "SECTION6 | 6.1.8 | Ensure permissions on /etc/gshadow- are configured"
  ansible.builtin.file:
    dest: /etc/gshadow-
    owner: root
    group: shadow
    mode: "0640"
  when:
    - cis_ubuntu2204_rule_6_1_8
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1

- name: "SECTION6 | 6.1.9 | Ensure no world writable files exist"
  when:
    - cis_ubuntu2204_rule_6_1_9
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.1.9 | Ensure no world writable files exist | get list of no world writable files"
      ansible.builtin.shell: >
        set -o pipefail &&
        df --local -P
        | awk '{if (NR!=1) print $6}'
        | xargs -I '{}' find '{}' -xdev -type f -perm -0002 2>/dev/null
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_no_world_writable_files
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.1.9 | Ensure no world writable files exist | removing write access"
      ansible.builtin.file:
        dest: "{{ item }}"
        mode: o-w
      with_items: "{{ cis_ubuntu2204_no_world_writable_files.stdout_lines }}"

- name: "SECTION6 | 6.1.10 | Ensure no unowned files or directories exist"
  when:
    - cis_ubuntu2204_rule_6_1_10
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.1.10 | Ensure no unowned files or directories exist | get list of no unowned files or directories"
      ansible.builtin.shell: >
        set -o pipefail &&
        df --local -P
        | awk {'if (NR!=1) print $6'}
        | xargs -I '{}' find '{}' -xdev -nouser 2>/dev/null
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_no_unowned_files_or_directories
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.1.10 | Ensure no unowned files or directories exist | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Locate files that are owned by users or groups not listed in the system configuration
          files, and reset the ownership of these files to some active user on the system as appropriate
          #############################################################################################
          {{ cis_ubuntu2204_no_unowned_files_or_directories.stdout_lines | join(', ') }}
          #############################################################################################
      when:
        - cis_ubuntu2204_no_unowned_files_or_directories.stdout_lines is defined
        - cis_ubuntu2204_no_unowned_files_or_directories.stdout_lines | length > 0

- name: "SECTION6 | 6.1.11 | Ensure no ungrouped files or directories exist"
  when:
    - cis_ubuntu2204_rule_6_1_11
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.1.11 | Ensure no ungrouped files or directories exist | get list of no ungrouped files or directories"
      ansible.builtin.shell: >
        set -o pipefail &&
        df --local -P
        | awk '{if (NR!=1) print $6}'
        | xargs -I '{}' find '{}' -xdev -nogroup 2>/dev/null
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_no_ungrouped_files_or_directories
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.1.11 | Ensure no ungrouped files or directories exist | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Locate files that are owned by users or groups not listed in the system configuration
          files, and reset the ownership of these files to some active user on the system as appropriate
          #############################################################################################
          {{ cis_ubuntu2204_no_ungrouped_files_or_directories.stdout_lines | join(', ') }}
          #############################################################################################
      when:
        - cis_ubuntu2204_no_ungrouped_files_or_directories.stdout_lines is defined
        - cis_ubuntu2204_no_ungrouped_files_or_directories.stdout_lines | length > 0

- name: "SECTION6 | 6.1.12 | Audit SUID executables"
  when:
    - cis_ubuntu2204_rule_6_1_12
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.1.12 | Audit SUID executables | get list of SUID executables"
      ansible.builtin.shell: >
        set -o pipefail &&
        df --local -P
        | awk '{if (NR!=1) print $6}'
        | xargs -I '{}' find '{}' -xdev -type f -perm -4000 2>/dev/null
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_suid_executables
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.1.12 | Audit SUID executables | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Ensure that no rogue SUID programs have been introduced into the system. Review the
          files returned by the action in the Audit section and confirm the integrity of these binaries
          #############################################################################################
          {{ cis_ubuntu2204_suid_executables.stdout_lines | join(', ') }}
          #############################################################################################
      when:
        - cis_ubuntu2204_suid_executables.stdout_lines is defined
        - cis_ubuntu2204_suid_executables.stdout_lines | length > 0

- name: "SECTION6 | 6.1.13 | Audit SGID executables"
  when:
    - cis_ubuntu2204_rule_6_1_13
  tags:
    - rule_6_1
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.1.13 | Audit SGID executables | get list of SGID executables"
      ansible.builtin.shell: >
        set -o pipefail &&
        df --local -P
        | awk '{if (NR!=1) print $6}'
        | xargs -I '{}' find '{}' -xdev -type f -perm -2000 2>/dev/null
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_sgid_executables
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.1.13 | Audit SGID executables | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Ensure that no rogue SGID programs have been introduced into the system. Review the
          files returned by the action in the Audit section and confirm the integrity of these binaries
          #############################################################################################
          {{ cis_ubuntu2204_sgid_executables.stdout_lines | join(', ') }}
          #############################################################################################
      when:
        - cis_ubuntu2204_sgid_executables.stdout_lines is defined
        - cis_ubuntu2204_sgid_executables.stdout_lines | length > 0

# ------------------------------------------------------------------------------

- name: "SECTION6 | 6.2.1 | Ensure accounts in /etc/passwd use shadowed passwords"
  ansible.builtin.replace:
    dest: /etc/passwd
    regexp: "^([a-zA-Z0-9_-]*):[^:]*:"
    replace: '\1:x:'
  when:
    - cis_ubuntu2204_rule_6_2_1
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1

- name: "SECTION6 | 6.2.2 | Ensure /etc/shadow password fields are not empty"
  when:
    - cis_ubuntu2204_rule_6_2_2
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.2 | Ensure /etc/shadow password fields are not empty | get list of empty password fields"
      ansible.builtin.shell: >
        set -o pipefail &&
        awk -F: '($2 == "" ) { print $1 }' /etc/shadow 2>/dev/null
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_empty_password_fields
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.2 | Ensure /etc/shadow password fields are not empty | lock user"
      ansible.builtin.user:
        name: "{{ item }}"
        password_lock: true
      # ansible.builtin.command: "passwd -l {{ item }}"
      # changed_when: cis_ubuntu2204_empty_password_fields_changed.rc == 0
      # failed_when: cis_ubuntu2204_empty_password_fields_changed.rc == 1
      # check_mode: false
      # register: cis_ubuntu2204_empty_password_fields_changed
      with_items: "{{ cis_ubuntu2204_empty_password_fields.stdout_lines }}"

- name: "SECTION6 | 6.2.3 | Ensure all groups in /etc/passwd exist in /etc/group"
  when:
    - cis_ubuntu2204_rule_6_2_3
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.3 | Ensure all groups in /etc/passwd exist in /etc/group | get list of groups for passwd exists in group"
      ansible.builtin.shell: |
        set -o pipefail
        for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
          grep -q -P "^.*?:[^:]*:$i:" /etc/group
          if [ $? -ne 0 ]; then
            echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
          fi
        done
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_groups_for_passwd_exists_in_group
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.3 | Ensure all groups in /etc/passwd exist in /etc/group | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Analyze the output of the Audit step above and
          perform the appropriate action to correct any discrepancies found
          #############################################################################################
          {{ cis_ubuntu2204_groups_for_passwd_exists_in_group.stdout_lines | join(', ') }}
          #############################################################################################
      when:
        - cis_ubuntu2204_groups_for_passwd_exists_in_group.stdout_lines is defined
        - cis_ubuntu2204_groups_for_passwd_exists_in_group.stdout_lines | length > 0

# TODO: add also set prime group
#       awk -F: -v GID="$(awk -F: '($1=="shadow") {print $3}' /etc/group)" '($4==GID) {print $1}' /etc/passwd
#       usermod -g <primary group> <user>
- name: "SECTION6 | 6.2.4 | Ensure shadow group is empty"
  ansible.builtin.replace:
    dest: /etc/group
    regexp: "(^shadow:[^:]*:[^:]*:)([^:]+$)"
    replace: '\1'
  when:
    - cis_ubuntu2204_rule_6_2_4
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1

- name: "SECTION6 | 6.2.5 | Ensure no duplicate UIDs exist"
  when:
    - cis_ubuntu2204_rule_6_2_5
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.5 | Ensure no duplicate UIDs exist | get list of duplicate UIDs"
      ansible.builtin.shell: |
        set -o pipefail
        cut -f3 -d":" /etc/passwd | sort -n | uniq -c | while read x ; do
          [ -z "$x" ] && break
          set - $x
          if [ $1 -gt 1 ]; then
            users=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs)
            echo "Duplicate UID ($2): $users"
          fi
        done
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_duplicate_uids
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.5 | Ensure no duplicate UIDs exist | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Based on the results of the audit script, establish unique UIDs and review all files owned
          by the shared UIDs to determine which UID they are supposed to belong to
          #############################################################################################
          {{ cis_ubuntu2204_duplicate_uids.stdout_lines | join(', ') }}
          #############################################################################################
      when:
        - cis_ubuntu2204_duplicate_uids.stdout_lines is defined
        - cis_ubuntu2204_duplicate_uids.stdout_lines | length > 0

- name: "SECTION6 | 6.2.6 | Ensure no duplicate GIDs exist"
  when:
    - cis_ubuntu2204_rule_6_2_6
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.6 | Ensure no duplicate GIDs exist | get list of duplicate GIDs"
      ansible.builtin.shell: |
        set -o pipefail
        cut -d: -f3 /etc/group | sort | uniq -d | while read x ; do
          echo "Duplicate GID ($x) in /etc/group"
        done
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_duplicate_gids
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.6 | Ensure no duplicate GIDs exist | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Based on the results of the audit script, establish unique GIDs and review all files
          owned by the shared GID to determine which group they are supposed to belong to
          #############################################################################################
          {{ cis_ubuntu2204_duplicate_gids.stdout_lines | join(', ') }}
          #############################################################################################
      when:
        - cis_ubuntu2204_duplicate_gids.stdout_lines is defined
        - cis_ubuntu2204_duplicate_gids.stdout_lines | length > 0

- name: "SECTION6 | 6.2.7 | Ensure no duplicate user names exist"
  when:
    - cis_ubuntu2204_rule_6_2_7
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.7 | Ensure no duplicate user names exist | get list of duplicate user names"
      ansible.builtin.shell: |
        set -o pipefail
        cut -d: -f1 /etc/passwd | sort | uniq -d | while read -r x; do
          echo "Duplicate login name $x in /etc/passwd"
        done
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_duplicate_user_names
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.7 | Ensure no duplicate user names exist | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Based on the results of the audit script, establish unique user names for the users. File
          ownerships will automatically reflect the change as long as the users have unique UIDs
          #############################################################################################
          {{ cis_ubuntu2204_duplicate_user_names.stdout_lines | join(', ') }}
          #############################################################################################
      when:
        - cis_ubuntu2204_duplicate_user_names.stdout_lines is defined
        - cis_ubuntu2204_duplicate_user_names.stdout_lines | length > 0

- name: "SECTION6 | 6.2.8 | Ensure no duplicate group names exist"
  when:
    - cis_ubuntu2204_rule_6_2_8
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.8 | Ensure no duplicate group names exist | get list of duplicate group names"
      ansible.builtin.shell: |
        set -o pipefail
        cut -d: -f1 /etc/group | sort | uniq -d | while read -r x; do
          echo "Duplicate group name $x in /etc/group"
        done
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_duplicate_group_names
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.8 | Ensure no duplicate group names exist | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Based on the results of the audit script, establish unique names for the user groups. File
          group ownerships will automatically reflect the change as long as the groups have unique GIDs
          #############################################################################################
          {{ cis_ubuntu2204_duplicate_group_names.stdout_lines | join(', ') }}
          #############################################################################################
      when:
        - cis_ubuntu2204_duplicate_group_names.stdout_lines is defined
        - cis_ubuntu2204_duplicate_group_names.stdout_lines | length > 0

- name: "SECTION6 | 6.2.9 | Ensure root PATH Integrity"
  when:
    - cis_ubuntu2204_rule_6_2_9
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.9 | Ensure root PATH Integrity | get list of root PATH Integrity"
      ansible.builtin.shell: |
        set -o pipefail
        RPCV="$(sudo -Hiu root env | grep '^PATH' | cut -d= -f2)"
        echo "$RPCV" | grep -q "::" && echo "root's path contains a empty directory (::)"
        echo "$RPCV" | grep -q ":$" && echo "root's path contains a trailing (:)"
        for x in $(echo "$RPCV" | tr ":" " "); do
          if [ -d "$x" ]; then
            ls -ldH "$x" | awk '$9 == "." {print "PATH contains current working directory (.)"}
            $3 != "root" {print $9, "is not owned by root"}
            substr($1,6,1) != "-" {print $9, "is group writable"}
            substr($1,9,1) != "-" {print $9, "is world writable"}'
          else
            echo "$x is not a directory"
          fi
        done
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_root_path_integrity
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.9 | Ensure root PATH Integrity | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Correct or justify any items discovered in the Audit step
          #############################################################################################
          {{ cis_ubuntu2204_root_path_integrity.stdout_lines | join(', ') }}
          #############################################################################################
      when:
        - cis_ubuntu2204_root_path_integrity.stdout_lines is defined
        - cis_ubuntu2204_root_path_integrity.stdout_lines | length > 0

- name: "SECTION6 | 6.2.10 | Ensure root is the only UID 0 account"
  when:
    - cis_ubuntu2204_rule_6_2_10
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.10 | Ensure root is the only UID 0 account | get root is the only UID 0 account"
      ansible.builtin.command: "awk -F: '($3 == 0) { print $1 }' /etc/passwd"
      register: cis_ubuntu2204_root_is_the_only_uid_0_account
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.10 | Ensure root is the only UID 0 account | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Remove any users other than 'root' with UID '0' or assign them a new UID if appropriate
          #############################################################################################
          {{ cis_ubuntu2204_root_is_the_only_uid_0_account.stdout_lines | join(', ') }}
          #############################################################################################
      when:
        - cis_ubuntu2204_root_is_the_only_uid_0_account.stdout_lines is defined
        - cis_ubuntu2204_root_is_the_only_uid_0_account.stdout_lines | length > 0

- name: "SECTION6 | 6.2.11 | Ensure local interactive user home directories exist"
  when:
    - cis_ubuntu2204_rule_6_2_11
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.11 | Ensure local interactive user home directories exist | get list of user home"
      ansible.builtin.shell: |
        set -o pipefail
        valid_shells="^($(sed -rn '/^\//{s,/,\\\\/,g;p}' /etc/shells | paste -s -d '|' -))$"
        awk -v pat="$valid_shells" -F: '$(NF) ~ pat { print $1 " " $(NF-1) }' /etc/passwd
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_list_of_user_home
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.11 | Ensure local interactive user home directories exist | create home dir"
      ansible.builtin.file:
        path: "{{ item.split()[1] }}"
        state: directory
        mode: "0700"
        owner: "{{ item.split()[0] }}"
        group: "{{ item.split()[0] }}"
      with_items: "{{ cis_ubuntu2204_list_of_user_home.stdout_lines }}"
      # when:
      #   - cis_ubuntu2204_list_of_user_home.stdout_lines is defined
      #   - cis_ubuntu2204_list_of_user_home.stdout_lines | length > 0

# NOTE: will still be set in rule 'cis_ubuntu2204_rule_6_2_11'
# - name: "SECTION6 | 6.2.12 | Ensure local interactive users own their home directories"

# NOTE: will still be set in rule 'cis_ubuntu2204_rule_6_2_11'
# - name: "SECTION6 | 6.2.13 | Ensure local interactive user home directories are mode 750 or more restrictive"

- name: "SECTION6 | 6.2.14 | Ensure no local interactive user has .netrc files"
  when:
    - cis_ubuntu2204_rule_6_2_14
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.14 | Ensure no local interactive user has .netrc files | get list of local interactive user netrc"
      ansible.builtin.shell: |
        set -o pipefail
        valid_shells="^($(sed -rn '/^\//{s,/,\\\\/,g;p}' /etc/shells | paste -s -d '|' -))$"
        awk -v pat="$valid_shells" -F: '$(NF) ~ pat { print $1 " " $(NF-1) }' /etc/passwd
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_local_interactive_user_netrc
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.14 | Ensure no local interactive user has .netrc files | create home dir"
      ansible.builtin.file:
        path: "{{ item.split()[1] }}/.netrc"
        state: absent
      with_items: "{{ cis_ubuntu2204_local_interactive_user_netrc.stdout_lines }}"
      # when:
      #   - cis_ubuntu2204_local_interactive_user_netrc.stdout_lines is defined
      #   - cis_ubuntu2204_local_interactive_user_netrc.stdout_lines | length > 0

- name: "SECTION6 | 6.2.15 | Ensure no local interactive user has .forward files"
  when:
    - cis_ubuntu2204_rule_6_2_15
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.15 | Ensure no local interactive user has .forward files | get list of local interactive user forward"
      ansible.builtin.shell: |
        set -o pipefail
        valid_shells="^($(sed -rn '/^\//{s,/,\\\\/,g;p}' /etc/shells | paste -s -d '|' -))$"
        awk -v pat="$valid_shells" -F: '$(NF) ~ pat { print $1 " " $(NF-1) }' /etc/passwd
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_local_interactive_user_forward
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.15 | Ensure no local interactive user has .forward files | create home dir"
      ansible.builtin.file:
        path: "{{ item.split()[1] }}/.forward"
        state: absent
      with_items: "{{ cis_ubuntu2204_local_interactive_user_forward.stdout_lines }}"
      # when:
      #   - cis_ubuntu2204_local_interactive_user_forward.stdout_lines is defined
      #   - cis_ubuntu2204_local_interactive_user_forward.stdout_lines | length > 0

- name: "SECTION6 | 6.2.16 | Ensure no local interactive user has .rhosts files"
  when:
    - cis_ubuntu2204_rule_6_2_16
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.16 | Ensure no local interactive user has .rhosts files | get list of local interactive user rhosts"
      ansible.builtin.shell: |
        set -o pipefail
        valid_shells="^($(sed -rn '/^\//{s,/,\\\\/,g;p}' /etc/shells | paste -s -d '|' -))$"
        awk -v pat="$valid_shells" -F: '$(NF) ~ pat { print $1 " " $(NF-1) }' /etc/passwd
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_local_interactive_user_rhosts
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.16 | Ensure no local interactive user has .rhosts files | create home dir"
      ansible.builtin.file:
        path: "{{ item.split()[1] }}/.rhosts"
        state: absent
      with_items: "{{ cis_ubuntu2204_local_interactive_user_rhosts.stdout_lines }}"
      # when:
      #   - cis_ubuntu2204_local_interactive_user_rhosts.stdout_lines is defined
      #   - cis_ubuntu2204_local_interactive_user_rhosts.stdout_lines | length > 0

- name: "SECTION6 | 6.2.17 | Ensure local interactive user dot files are not group or world writable"
  when:
    - cis_ubuntu2204_rule_6_2_17
  tags:
    - rule_6_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION6 | 6.2.17 | Ensure local interactive user dot files are not group or world writable | get list of local interactive user dot files"
      ansible.builtin.shell: |
        set -o pipefail
        valid_shells="^($(sed -rn '/^\//{s,/,\\\\/,g;p}' /etc/shells | paste -s -d '|' -))$"
        awk -v pat="$valid_shells" -F: '$(NF) ~ pat { print $1 " " $(NF-1) }' /etc/passwd
      args:
        executable: /bin/bash
      register: cis_ubuntu2204_local_interactive_user_dot_files
      changed_when: false
      check_mode: false
    - name: "SECTION6 | 6.2.17 | Ensure local interactive user dot files are not group or world writable | find dot files"
      ansible.builtin.find:
        paths: "{{ item.split()[1] }}"
        patterns: ".??*"
        file_type: file
        hidden: true
        recurse: yes
      loop: "{{ cis_ubuntu2204_local_interactive_user_dot_files.stdout_lines }}"
      register: cis_ubuntu2204_local_interactive_user_dot_files_found
    - name: "SECTION6 | 6.2.17 | Ensure local interactive user dot files are not group or world writable | set permission"
      ansible.builtin.file:
        path: "{{ item.path }}"
        mode: go-w
        owner: "{{ item.uid }}"
        group: "{{ item.gid }}"
      with_items: "{{ cis_ubuntu2204_local_interactive_user_dot_files_found.results | map(attribute='files') | flatten }}"
      when:
        - cis_ubuntu2204_local_interactive_user_dot_files_found.results | map(attribute='files') | flatten | selectattr('path', 'defined')
        - cis_ubuntu2204_local_interactive_user_dot_files_found.results | map(attribute='files') | flatten | selectattr('uid', 'defined')
        - cis_ubuntu2204_local_interactive_user_dot_files_found.results | map(attribute='files') | flatten | selectattr('gid', 'defined')
